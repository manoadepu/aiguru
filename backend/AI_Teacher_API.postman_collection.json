{
	"info": {
		"_postman_id": "7d3a4c8e-5f11-4e0a-b8b9-cc17a9df3e1d",
		"name": "AI Teacher API",
		"description": "API collection for testing the AI Teacher application endpoints.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:8080",
			"type": "string"
		},
		{
			"key": "token",
			"value": "",
			"type": "string"
		},
		{
			"key": "user_id",
			"value": "",
			"type": "string"
		},
		{
			"key": "child_id",
			"value": "",
			"type": "string"
		}
	],
	"item": [
		{
			"name": "1. Authentication",
			"description": "Authentication endpoints for user registration and login",
			"item": [
				{
					"name": "Register User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"",
									"pm.test(\"Status code is 201 Created\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response has user data\", function () {",
									"    pm.expect(response).to.have.property('id');",
									"    pm.expect(response).to.have.property('email');",
									"    pm.expect(response).to.have.property('name');",
									"    pm.expect(response).to.not.have.property('password');",
									"    pm.expect(response).to.not.have.property('hashed_password');",
									"});",
									"",
									"pm.collectionVariables.set(\"user_id\", response.id);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"test@example.com\",\n    \"password\": \"password123\",\n    \"name\": \"Test User\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/auth/register",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"register"
							]
						},
						"description": "Register a new user account"
					},
					"response": []
				},
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"",
									"pm.test(\"Status code is 200 OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has token\", function () {",
									"    pm.expect(response).to.have.property('access_token');",
									"    pm.expect(response).to.have.property('token_type');",
									"    pm.expect(response.token_type).to.eql('bearer');",
									"});",
									"",
									"// Save the token for later requests",
									"if (response.access_token) {",
									"    pm.collectionVariables.set(\"token\", response.access_token);",
									"}",
									"",
									"// Save user_id if available in response",
									"if (response.user && response.user.id) {",
									"    pm.collectionVariables.set(\"user_id\", response.user.id);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "username",
									"value": "test@example.com",
									"type": "text"
								},
								{
									"key": "password",
									"value": "password123",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/auth/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"login"
							]
						},
						"description": "Login with username (email) and password to get an access token"
					},
					"response": []
				}
			]
		},
		{
			"name": "2. User Management",
			"description": "User management endpoints for accessing and updating user information",
			"item": [
				{
					"name": "Get Current User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"",
									"pm.test(\"Status code is 200 OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has user data\", function () {",
									"    pm.expect(response).to.have.property('id');",
									"    pm.expect(response).to.have.property('email');",
									"    pm.expect(response).to.have.property('name');",
									"    pm.expect(response).to.not.have.property('password');",
									"    pm.expect(response).to.not.have.property('hashed_password');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/users/me",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"users",
								"me"
							]
						},
						"description": "Get authenticated user's profile"
					},
					"response": []
				},
				{
					"name": "Update Current User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"",
									"pm.test(\"Status code is 200 OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has updated user data\", function () {",
									"    pm.expect(response).to.have.property('id');",
									"    pm.expect(response).to.have.property('name');",
									"    pm.expect(response.name).to.eql('Updated Name');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Updated Name\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/users/me",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"users",
								"me"
							]
						},
						"description": "Update authenticated user's profile information"
					},
					"response": []
				},
				{
					"name": "Update Password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"",
									"pm.test(\"Status code is 200 OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has user data\", function () {",
									"    pm.expect(response).to.have.property('id');",
									"    pm.expect(response).to.have.property('email');",
									"    pm.expect(response).to.not.have.property('password');",
									"    pm.expect(response).to.not.have.property('hashed_password');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"password\": \"newpassword123\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/users/me",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"users",
								"me"
							]
						},
						"description": "Update user password"
					},
					"response": []
				},
				{
					"name": "Get User by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"",
									"pm.test(\"Status code is 200 OK or 403 Forbidden\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 403]);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.test(\"Response has user data\", function () {",
									"        pm.expect(response).to.have.property('id');",
									"        pm.expect(response).to.have.property('email');",
									"        pm.expect(response).to.have.property('name');",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/users/{{user_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"users",
								"{{user_id}}"
							]
						},
						"description": "Get a user by ID (only for own ID or superuser)"
					},
					"response": []
				}
			]
		},
		{
			"name": "3. Child Management",
			"description": "Child profile management endpoints for creating and managing student profiles",
			"item": [
				{
					"name": "Create Child",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"",
									"pm.test(\"Status code is 201 Created\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response has child data\", function () {",
									"    pm.expect(response).to.have.property('id');",
									"    pm.expect(response).to.have.property('name');",
									"    pm.expect(response).to.have.property('grade');",
									"    pm.expect(response).to.have.property('subjects');",
									"    pm.expect(response).to.have.property('parent_id');",
									"    pm.expect(response.parent_id).to.eql(pm.collectionVariables.get(\"user_id\"));",
									"});",
									"",
									"// Save child ID for later requests",
									"pm.collectionVariables.set(\"child_id\", response.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Test Child\",\n    \"grade\": \"3rd grade\",\n    \"subjects\": [\"Math\", \"Science\"],\n    \"learning_style\": \"Visual\",\n    \"preferences\": {\n        \"response_style\": \"concise\",\n        \"examples_type\": \"real-world\"\n    }\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/children/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"children",
								""
							]
						},
						"description": "Create a new child profile"
					},
					"response": []
				},
				{
					"name": "Get All Children",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"",
									"pm.test(\"Status code is 200 OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response is an array\", function () {",
									"    pm.expect(Array.isArray(response)).to.be.true;",
									"});",
									"",
									"if (response.length > 0) {",
									"    pm.test(\"Children have required properties\", function () {",
									"        pm.expect(response[0]).to.have.property('id');",
									"        pm.expect(response[0]).to.have.property('name');",
									"        pm.expect(response[0]).to.have.property('grade');",
									"        pm.expect(response[0]).to.have.property('subjects');",
									"        pm.expect(response[0]).to.have.property('parent_id');",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/children/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"children",
								""
							]
						},
						"description": "Get all child profiles for authenticated user"
					},
					"response": []
				},
				{
					"name": "Get Child by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"",
									"pm.test(\"Status code is 200 OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has child data\", function () {",
									"    pm.expect(response).to.have.property('id');",
									"    pm.expect(response).to.have.property('name');",
									"    pm.expect(response).to.have.property('grade');",
									"    pm.expect(response).to.have.property('subjects');",
									"    pm.expect(response).to.have.property('parent_id');",
									"    pm.expect(response).to.have.property('sessions');",
									"    pm.expect(response).to.have.property('quizzes');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/children/{{child_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"children",
								"{{child_id}}"
							]
						},
						"description": "Get a specific child profile by ID"
					},
					"response": []
				},
				{
					"name": "Update Child",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"",
									"pm.test(\"Status code is 200 OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has updated child data\", function () {",
									"    pm.expect(response).to.have.property('id');",
									"    pm.expect(response).to.have.property('grade');",
									"    pm.expect(response.grade).to.eql('4th grade');",
									"    pm.expect(response).to.have.property('subjects');",
									"    pm.expect(response.subjects).to.include.members(['Math', 'Science', 'Art']);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"grade\": \"4th grade\",\n    \"subjects\": [\"Math\", \"Science\", \"Art\"],\n    \"preferences\": {\n        \"response_style\": \"detailed\"\n    }\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/children/{{child_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"children",
								"{{child_id}}"
							]
						},
						"description": "Update a child profile"
					},
					"response": []
				},
				{
					"name": "Delete Child",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"",
									"pm.test(\"Status code is 200 OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has deleted child data\", function () {",
									"    pm.expect(response).to.have.property('id');",
									"    pm.expect(response.id).to.eql(pm.collectionVariables.get(\"child_id\"));",
									"    pm.expect(response).to.have.property('name');",
									"    pm.expect(response).to.have.property('parent_id');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/children/{{child_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"children",
								"{{child_id}}"
							]
						},
						"description": "Delete a child profile"
					},
					"response": []
				},
				{
					"name": "Validation Error - Empty Subjects",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422 Unprocessable Entity\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Response has validation error details\", function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData).to.have.property('detail');",
									"    pm.expect(responseData.detail).to.include('subjects');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Invalid Child\",\n    \"grade\": \"3rd grade\",\n    \"subjects\": []\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/children/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"children",
								""
							]
						},
						"description": "Test validation error when subjects array is empty"
					},
					"response": []
				}
			]
		},
		{
			"name": "4. Health Check",
			"item": [
				{
					"name": "Health Check",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has status field\", function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData).to.have.property('status');",
									"    pm.expect(responseData.status).to.eql('ok');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/health",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"health"
							]
						},
						"description": "API health check endpoint"
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}
